-- 1. Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").
SELECT CustomerId,
       FirstName,
       LastName,
       Country
  FROM customers
 WHERE Country <> 'USA';

-- 2. Show only the Customers from Brazil.
SELECT *
  FROM customers
 WHERE Country = 'Brazil';

-- 3. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
SELECT FirstName,
       LastName,
       InvoiceId,
       InvoiceDate,
       BillingCountry
  FROM invoices
       JOIN
       customers ON invoices.CustomerId = customers.CustomerId
 WHERE customers.Country = 'Brazil';
 
-- 4. Show the Employees who are Sales Agents.
SELECT *
  FROM employees
 WHERE Title = 'Sales Support Agent';

-- 5. Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry
  FROM invoices;

-- 6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
SELECT invoices.InvoiceId,
       employees.LastName,
       employees.FirstName
  FROM invoices
       LEFT JOIN
       customers ON invoices.CustomerId = customers.CustomerId
       LEFT JOIN
       employees ON customers.SupportRepId = employees.EmployeeId
 WHERE employees.Title = 'Sales Support Agent'
 ORDER BY employees.LastName asc;

-- 7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT invoices.Total,
       customers.FirstName cust_FirstName,
       customers.LastName cust_LastName,
       customers.Country,
       employees.LastName agent_LastName,
       employees.FirstName agent_FirstName
  FROM invoices
       LEFT JOIN
       customers ON invoices.CustomerId = customers.CustomerId
       LEFT JOIN
       employees ON customers.SupportRepId = employees.EmployeeId
 WHERE employees.Title = 'Sales Support Agent';

-- 8. How many Invoices were there in 2009?
SELECT COUNT(*) AS total_invoices
  FROM invoices
 WHERE InvoiceDate LIKE '2009%';

-- 9. What are the total sales for 2009?
SELECT ROUND(SUM(Total), 2) AS total_sales
FROM Invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';
-- OR
SELECT ROUND(SUM(Quantity * UnitPrice), 2) AS total_sales
  FROM invoice_items
       JOIN
       invoices ON invoice_items.InvoiceId = invoices.InvoiceId
 WHERE InvoiceDate LIKE '2009%';

-- 10. Write a query that includes the purchased track name with each invoice line ID.
SELECT invoice_items.InvoiceLineId,
       tracks.Name
  FROM invoice_items
       LEFT JOIN
       tracks ON invoice_items.TrackId = tracks.TrackId
 ORDER BY invoice_items.InvoiceLineId;

-- 11. Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT invoice_items.InvoiceLineId,
       tracks.Name,
       artists.Name
  FROM invoice_items
       LEFT JOIN
       tracks ON invoice_items.TrackId = tracks.TrackId
       LEFT JOIN
       albums ON tracks.AlbumId = albums.AlbumId
       LEFT JOIN
       artists ON albums.ArtistId = artists.ArtistId
 ORDER BY invoice_items.InvoiceLineId;

-- 12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT tracks.Name track_name,
       albums.Title album_title,
       media_types.Name media_type,
       genres.Name genre
  FROM tracks
       JOIN
       albums ON tracks.AlbumId = albums.AlbumId
       JOIN
       media_types ON tracks.MediaTypeId = media_types.MediaTypeId
       JOIN
       genres ON tracks.GenreId = genres.GenreId
 ORDER BY albums.Title;

-- 13. Show the total sales made by each sales agent.
SELECT employees.LastName,
       employees.FirstName,
       ROUND(SUM(invoice_items.Quantity * invoice_items.UnitPrice), 2) AS total_sales
  FROM invoice_items
       LEFT JOIN
       invoices ON invoice_items.InvoiceId = invoices.InvoiceId
       LEFT JOIN
       customers ON invoices.CustomerId = customers.CustomerId
       LEFT JOIN
       employees ON customers.SupportRepId = employees.EmployeeId
 GROUP BY employees.LastName;
 
-- 14. Which sales agent made the most dollars in sales in 2009?
SELECT employees.LastName,
       employees.FirstName,
       ROUND(SUM(invoice_items.Quantity * invoice_items.UnitPrice), 2) AS total_sales
  FROM invoice_items
       LEFT JOIN
       invoices ON invoice_items.InvoiceId = invoices.InvoiceId
       LEFT JOIN
       customers ON invoices.CustomerId = customers.CustomerId
       LEFT JOIN
       employees ON customers.SupportRepId = employees.EmployeeId
 WHERE invoices.InvoiceDate LIKE '2009%'
 GROUP BY employees.LastName
 ORDER BY total_sales DESC
 LIMIT 1;

-- 15. How many artists are in each genre?
SELECT genres.Name genre,
       COUNT(DISTINCT artists.ArtistId) total_artists
  FROM genres
       LEFT JOIN
       tracks ON genres.GenreId = tracks.GenreId
       LEFT JOIN
       albums ON tracks.AlbumId = albums.AlbumId
       LEFT JOIN
       artists ON albums.ArtistId = artists.ArtistId
 GROUP BY genres.Name;

-- 16. Rank the 10 highest paying customers by total money spent. Include their country and contact information.
SELECT DENSE_RANK() OVER (ORDER BY SUM(invoices.Total) DESC) AS Rank,
       customers.CustomerId,
       customers.FirstName,
       customers.LastName,
       SUM(invoices.Total) AS TotalSpent,
       customers.Country,
       customers.Phone,
       customers.Email
  FROM customers
       JOIN
       invoices ON customers.CustomerId = invoices.CustomerId
 GROUP BY customers.CustomerId,
          customers.FirstName,
          customers.LastName,
          customers.Country,
          customers.Phone,
          customers.Email
 ORDER BY TotalSpent DESC
 LIMIT 10;

